// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wishlists     Wishlist[]
  wishlistItem  WishlistItem[]
  groups        Group[]        @relation(name: "OwnedGroups")
  subscribed    Group[]        @relation(name: "Subscribed")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id        String     @id @default(cuid())
  title     String
  createdAt DateTime
  wishlist  Wishlist[]
  createdBy User       @relation(name: "OwnedGroups", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  members   User[]     @relation(name: "Subscribed")
}

model Wishlist {
  id           String         @id @default(cuid())
  title        String
  createdAt    DateTime
  wishlistItem WishlistItem[]
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  groups       Group[]
}

model WishlistItem {
  id         String   @id @default(cuid())
  title      String
  url        String?
  createdAt  DateTime
  userId     String?
  boughtBy   User?    @relation(fields: [userId], references: [id])
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
}
